"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readInstalledDotnetToolVersion = exports.readDotnetToolsManifest = void 0;
const devkit_1 = require("@nx/devkit");
const fs_1 = require("fs");
const path_1 = require("path");
function readDotnetToolsManifest(pathOverride = undefined) {
    const manifestPath = pathOverride !== null && pathOverride !== void 0 ? pathOverride : (0, path_1.join)(devkit_1.workspaceRoot, './.config/dotnet-tools.json');
    const manifest = (0, fs_1.existsSync)(manifestPath)
        ? (0, devkit_1.readJsonFile)(manifestPath)
        : undefined;
    if (manifest) {
        if (manifest.version === 1) {
            return manifest;
        }
        devkit_1.logger.warn(`Could not parse dotnet tools manifest version ${manifest.version}`);
    }
    return undefined;
}
exports.readDotnetToolsManifest = readDotnetToolsManifest;
function readInstalledDotnetToolVersion(tool, pathOverride) {
    const manifest = readDotnetToolsManifest(pathOverride);
    if (!manifest) {
        return undefined;
    }
    const searchKey = tool.toLowerCase();
    const toolManifestKey = Object.keys(manifest.tools).find((key) => key.toLowerCase() === searchKey);
    if (toolManifestKey) {
        return manifest.tools[toolManifestKey].version;
    }
    return undefined;
}
exports.readInstalledDotnetToolVersion = readInstalledDotnetToolVersion;
//# sourceMappingURL=dotnet-tools-manifest.js.map