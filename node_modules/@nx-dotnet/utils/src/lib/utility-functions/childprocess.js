"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleChildProcessPassthrough = exports.isChildProcess = void 0;
const tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-explicit-any */
const cp = require("child_process");
/**
 * TypeScript typings think ChildProcess is an interface, its a class.
 */
function isChildProcess(obj) {
    return obj instanceof cp.ChildProcess;
}
exports.isChildProcess = isChildProcess;
function handleChildProcessPassthrough(childProcess) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let resolver;
        const exitHandler = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (childProcess) {
                childProcess.kill('SIGINT');
                childProcess.kill('SIGINT');
            }
            process.removeListener('exit', exitHandler);
            process.removeListener('SIGINT', exitHandler);
            process.removeListener('SIGUSR1', exitHandler);
            process.removeListener('SIGUSR2', exitHandler);
            process.removeListener('uncaughtException', exitHandler);
            resolver();
        });
        //do something when app is closing
        process.on('exit', exitHandler);
        //catches ctrl+c event
        process.on('SIGINT', exitHandler);
        // catches "kill pid" (for example: nodemon restart)
        process.on('SIGUSR1', exitHandler);
        process.on('SIGUSR2', exitHandler);
        //catches uncaught exceptions
        process.on('uncaughtException', exitHandler);
        return new Promise((resolve) => {
            resolver = resolve;
        });
    });
}
exports.handleChildProcessPassthrough = handleChildProcessPassthrough;
//# sourceMappingURL=childprocess.js.map