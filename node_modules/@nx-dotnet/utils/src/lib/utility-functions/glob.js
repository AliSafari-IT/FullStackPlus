"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findProjectFileInPathSync = exports.findProjectFileInPath = exports.glob = exports.projPattern = void 0;
const devkit_1 = require("@nx/devkit");
const fg = require("fast-glob");
const path_1 = require("path");
const globOptions = {
    cwd: devkit_1.workspaceRoot,
    ignore: ['**/bin/**', '**/obj/**'],
    dot: true,
};
function projPattern(path) {
    return `${path}/**/*.@(cs|fs|vb|sql)proj`;
}
exports.projPattern = projPattern;
/**
 * Wraps the fast-glob package.
 * @returns array of file paths
 */
function glob(path, cwd) {
    return fg(path, !cwd ? globOptions : Object.assign(Object.assign({}, globOptions), { cwd: (0, path_1.join)(devkit_1.workspaceRoot, cwd) }));
}
exports.glob = glob;
function findProjectFileInPath(path) {
    return glob(projPattern(path)).then((results) => {
        if (!results || results.length === 0) {
            throw new Error(`Unable to find a build-able project within project's source directory!
- Looked in: ${path}`);
        }
        if (results.length > 1) {
            throw new Error(`More than one build-able projects are contained within the project's source directory! \r\n ${results.join(', \r\n')}`);
        }
        return results[0];
    });
}
exports.findProjectFileInPath = findProjectFileInPath;
function findProjectFileInPathSync(path) {
    const results = fg.sync(projPattern(path), globOptions);
    if (!results || results.length === 0) {
        throw new Error(`Unable to find a build-able project within project's source directory!
- Looked in: ${path}`);
    }
    if (results.length > 1) {
        throw new Error(`More than one build-able projects are contained within the project's source directory! \r\n ${results.join(', \r\n')}`);
    }
    return results[0];
}
exports.findProjectFileInPathSync = findProjectFileInPathSync;
//# sourceMappingURL=glob.js.map